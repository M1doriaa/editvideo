#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Module d·ªãch ph·ª• ƒë·ªÅ t·ª´ ng√¥n ng·ªØ g·ªëc sang ti·∫øng Anh
"""

import re
import time
from pathlib import Path

try:
    from googletrans import Translator as GoogleTranslator
    HAS_GOOGLETRANS = True
except ImportError:
    HAS_GOOGLETRANS = False

try:
    import requests
    HAS_REQUESTS = True
except ImportError:
    HAS_REQUESTS = False

class Translator:
    def __init__(self):
        self.google_translator = None
        
        if HAS_GOOGLETRANS:
            try:
                self.google_translator = GoogleTranslator()
                print("üåê S·ª≠ d·ª•ng Google Translate API")
            except Exception as e:
                print(f"‚ö†Ô∏è Kh√¥ng th·ªÉ kh·ªüi t·∫°o Google Translator: {e}")
                self.google_translator = None
        
        if not HAS_GOOGLETRANS:
            print("‚ö†Ô∏è C·∫ßn c√†i ƒë·∫∑t googletrans ƒë·ªÉ s·ª≠ d·ª•ng t√≠nh nƒÉng d·ªãch")
    
    def translate_subtitle(self, input_subtitle_path, output_subtitle_path, 
                          source_lang='vi', target_lang='en'):
        """
        D·ªãch file ph·ª• ƒë·ªÅ t·ª´ ng√¥n ng·ªØ g·ªëc sang ng√¥n ng·ªØ ƒë√≠ch
        
        Args:
            input_subtitle_path (str): ƒê∆∞·ªùng d·∫´n file ph·ª• ƒë·ªÅ g·ªëc
            output_subtitle_path (str): ƒê∆∞·ªùng d·∫´n l∆∞u file ph·ª• ƒë·ªÅ ƒë√£ d·ªãch
            source_lang (str): M√£ ng√¥n ng·ªØ g·ªëc
            target_lang (str): M√£ ng√¥n ng·ªØ ƒë√≠ch
        """
        try:
            print(f"üåê ƒêang d·ªãch ph·ª• ƒë·ªÅ t·ª´ {source_lang} sang {target_lang}...")
            
            # ƒê·ªçc file ph·ª• ƒë·ªÅ g·ªëc
            with open(input_subtitle_path, 'r', encoding='utf-8') as f:
                srt_content = f.read()
            
            # Ph√¢n t√≠ch v√† d·ªãch t·ª´ng ƒëo·∫°n ph·ª• ƒë·ªÅ
            translated_srt = self._translate_srt_content(
                srt_content, source_lang, target_lang
            )
            
            # L∆∞u file ph·ª• ƒë·ªÅ ƒë√£ d·ªãch
            with open(output_subtitle_path, 'w', encoding='utf-8') as f:
                f.write(translated_srt)
            
            print(f"‚úÖ D·ªãch ph·ª• ƒë·ªÅ th√†nh c√¥ng: {output_subtitle_path}")
            
        except Exception as e:
            raise Exception(f"L·ªói d·ªãch ph·ª• ƒë·ªÅ: {str(e)}")
    
    def _translate_srt_content(self, srt_content, source_lang, target_lang):
        """
        D·ªãch n·ªôi dung file SRT
        
        Args:
            srt_content (str): N·ªôi dung file SRT
            source_lang (str): Ng√¥n ng·ªØ g·ªëc
            target_lang (str): Ng√¥n ng·ªØ ƒë√≠ch
            
        Returns:
            str: N·ªôi dung SRT ƒë√£ d·ªãch
        """
        # Regex ƒë·ªÉ t√°ch c√°c th√†nh ph·∫ßn c·ªßa SRT
        srt_pattern = r'(\d+)\s*\n(\d{2}:\d{2}:\d{2},\d{3}) --> (\d{2}:\d{2}:\d{2},\d{3})\s*\n(.*?)(?=\n\d+\s*\n|\n*$)'
        
        matches = re.findall(srt_pattern, srt_content, re.DOTALL)
        
        if not matches:
            raise Exception("Kh√¥ng th·ªÉ ph√¢n t√≠ch file SRT")
        
        translated_entries = []
        
        for i, (index, start_time, end_time, text) in enumerate(matches):
            try:
                # D·ªãch vƒÉn b·∫£n
                translated_text = self._translate_text(
                    text.strip(), source_lang, target_lang
                )
                
                # T·∫°o entry SRT m·ªõi
                entry = f"{index}\n{start_time} --> {end_time}\n{translated_text}\n"
                translated_entries.append(entry)
                
                # Th√™m delay nh·ªè ƒë·ªÉ tr√°nh rate limit
                if i > 0 and i % 10 == 0:
                    time.sleep(1)
                
            except Exception as e:
                print(f"‚ö†Ô∏è L·ªói d·ªãch ƒëo·∫°n {index}: {e}")
                # Gi·ªØ nguy√™n vƒÉn b·∫£n g·ªëc n·∫øu kh√¥ng d·ªãch ƒë∆∞·ª£c
                entry = f"{index}\n{start_time} --> {end_time}\n{text.strip()}\n"
                translated_entries.append(entry)
        
        return '\n'.join(translated_entries)
    
    def _translate_text(self, text, source_lang, target_lang):
        """
        D·ªãch m·ªôt ƒëo·∫°n vƒÉn b·∫£n
        
        Args:
            text (str): VƒÉn b·∫£n c·∫ßn d·ªãch
            source_lang (str): Ng√¥n ng·ªØ g·ªëc
            target_lang (str): Ng√¥n ng·ªØ ƒë√≠ch
            
        Returns:
            str: VƒÉn b·∫£n ƒë√£ d·ªãch
        """
        if not text.strip():
            return text
        
        # Th·ª≠ d·ªãch v·ªõi Google Translate
        if self.google_translator:
            try:
                result = self.google_translator.translate(
                    text, 
                    src=source_lang, 
                    dest=target_lang
                )
                return result.text
            except Exception as e:
                print(f"‚ö†Ô∏è L·ªói Google Translate: {e}")
        
        # Fallback: D·ªãch b·∫±ng c√°ch s·ª≠ d·ª•ng API kh√°c ho·∫∑c tr·∫£ v·ªÅ g·ªëc
        return self._fallback_translate(text, source_lang, target_lang)
    
    def _fallback_translate(self, text, source_lang, target_lang):
        """
        Ph∆∞∆°ng ph√°p d·ªãch d·ª± ph√≤ng
        """
        # C√≥ th·ªÉ t√≠ch h·ª£p th√™m c√°c API d·ªãch kh√°c ·ªü ƒë√¢y
        # V√≠ d·ª•: DeepL, Microsoft Translator, v.v.
        
        # Hi·ªán t·∫°i ch·ªâ tr·∫£ v·ªÅ vƒÉn b·∫£n g·ªëc
        print(f"‚ö†Ô∏è Kh√¥ng th·ªÉ d·ªãch: '{text[:50]}...' - Gi·ªØ nguy√™n")
        return text
    
    def _detect_language(self, text):
        """
        Ph√°t hi·ªán ng√¥n ng·ªØ c·ªßa vƒÉn b·∫£n
        
        Args:
            text (str): VƒÉn b·∫£n c·∫ßn ph√°t hi·ªán ng√¥n ng·ªØ
            
        Returns:
            str: M√£ ng√¥n ng·ªØ
        """
        if self.google_translator:
            try:
                detection = self.google_translator.detect(text)
                return detection.lang
            except Exception as e:
                print(f"‚ö†Ô∏è Kh√¥ng th·ªÉ ph√°t hi·ªán ng√¥n ng·ªØ: {e}")
        
        return 'auto'
    
    def test_connection(self):
        """
        Ki·ªÉm tra k·∫øt n·ªëi d·ªãch thu·∫≠t
        
        Returns:
            bool: True n·∫øu c√≥ th·ªÉ d·ªãch ƒë∆∞·ª£c
        """
        try:
            test_text = "Hello"
            result = self._translate_text(test_text, 'en', 'vi')
            return result != test_text
        except Exception:
            return False
