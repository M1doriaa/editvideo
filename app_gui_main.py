#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
GUI ƒë∆°n gi·∫£n v·ªõi Video Overlay
"""

import tkinter as tk
from tkinter import ttk, filedialog, messagebox, scrolledtext
import threading
import os
import sys
import glob
from pathlib import Path

OPTIMAL_CHROMA_REMOVAL = {
    "green": (0.2, 0.15),    # Green optimized t·ª´ testing
    "blue": (0.18, 0.12),    # Blue c·∫ßn tolerance cao h∆°n
    "black": (0.01, 0.005),  # Black c·∫ßn precision
    "white": (0.02, 0.01),   # White precision nh∆∞ng kh√¥ng kh·∫Øt khe nh∆∞ black
    "cyan": (0.12, 0.08),    # Cyan d·ªÖ key
    "red": (0.25, 0.2),      # Red kh√≥ key nh·∫•t
    "magenta": (0.18, 0.12), # T∆∞∆°ng t·ª± blue
    "yellow": (0.22, 0.18)   # Kh√≥ v√¨ conflict v·ªõi skin tone
}
# Import main application
try:
    from main import AutoVideoEditor
except ImportError as e:
    print(f"‚ùå L·ªói import main application: {e}")
    sys.exit(1)

class VideoEditorGUI:
    def __init__(self, root):
        self.root = root
        self.root.title("·ª®ng d·ª•ng Ch·ªânh s·ª≠a Video T·ª± ƒë·ªông - C√≥ Video Overlay + Chroma Key")
        self.root.geometry("900x800")
        self.root.resizable(True, True)
        
        # Variables
        self.input_video_path = tk.StringVar()
        self.output_video_path = tk.StringVar()
        self.source_language = tk.StringVar(value="vi")
        self.target_language = tk.StringVar(value="en")
        self.video_folder_path = tk.StringVar(value="videoinput")
        self.words_per_line = tk.IntVar(value=7)  # S·ªë t·ª´ m·ªói d√≤ng ph·ª• ƒë·ªÅ
        self.processing = False
          # Overlay settings
        self.video_overlay_settings = {'enabled': False}
        
        self.setup_ui()
        
    def setup_ui(self):
        """Thi·∫øt l·∫≠p giao di·ªán ng∆∞·ªùi d√πng"""
        
        # Main frame
        main_frame = ttk.Frame(self.root, padding="10")
        main_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # Configure grid weights
        self.root.columnconfigure(0, weight=1)
        self.root.rowconfigure(0, weight=1)
        main_frame.columnconfigure(1, weight=1)
        
        # Title
        title_label = ttk.Label(
            main_frame, 
            text="üé¨ ·ª®ng d·ª•ng Ch·ªânh s·ª≠a Video v·ªõi Video Overlay",
            font=("Arial", 16, "bold")
        )
        title_label.grid(row=0, column=0, columnspan=3, pady=(0, 20))
        
        row = 1
        
        # Input video selection
        ttk.Label(main_frame, text="üìÅ Video ƒë·∫ßu v√†o:").grid(row=row, column=0, sticky=tk.W, pady=5)
        input_entry = ttk.Entry(main_frame, textvariable=self.input_video_path)
        input_entry.grid(row=row, column=1, sticky=(tk.W, tk.E), padx=(10, 5), pady=5)
        ttk.Button(main_frame, text="Ch·ªçn file", command=self.select_input_video).grid(row=row, column=2, padx=(5, 0), pady=5)
        row += 1
        
        # Output video path
        ttk.Label(main_frame, text="üíæ Video ƒë·∫ßu ra:").grid(row=row, column=0, sticky=tk.W, pady=5)
        output_entry = ttk.Entry(main_frame, textvariable=self.output_video_path)
        output_entry.grid(row=row, column=1, sticky=(tk.W, tk.E), padx=(10, 5), pady=5)
        ttk.Button(main_frame, text="Ch·ªçn v·ªã tr√≠", command=self.select_output_video).grid(row=row, column=2, padx=(5, 0), pady=5)
        row += 1
        
        # Language selection
        lang_frame = ttk.Frame(main_frame)
        lang_frame.grid(row=row, column=0, columnspan=3, sticky=(tk.W, tk.E), pady=5)
        
        ttk.Label(lang_frame, text="üåê Ng√¥n ng·ªØ g·ªëc:").pack(side=tk.LEFT)
        language_combo = ttk.Combobox(
            lang_frame, 
            textvariable=self.source_language,
            values=["vi", "en", "ja", "ko", "zh", "es", "fr", "de"],
            state="readonly",
            width=10
        )
        language_combo.pack(side=tk.LEFT, padx=(10, 20))
        
        ttk.Label(lang_frame, text="üéØ Ng√¥n ng·ªØ ƒë√≠ch:").pack(side=tk.LEFT)
        target_language_combo = ttk.Combobox(
            lang_frame, 
            textvariable=self.target_language,
            values=["en", "vi", "ja", "ko", "zh", "es", "fr", "de"],
            state="readonly",
            width=10
        )
        target_language_combo.pack(side=tk.LEFT, padx=(10, 0))
        
        # Words per line setting
        ttk.Label(lang_frame, text="üìù T·ª´/d√≤ng:").pack(side=tk.LEFT, padx=(20, 5))
        words_spinbox = ttk.Spinbox(
            lang_frame,
            from_=4, to=12,
            textvariable=self.words_per_line,
            width=5,
            state="readonly"
        )
        words_spinbox.pack(side=tk.LEFT)
        
        # Tooltip
        ttk.Label(lang_frame, text="(4-12 t·ª´, khuy·∫øn ngh·ªã 6-7)", 
                 font=("Arial", 8), foreground="gray").pack(side=tk.LEFT, padx=(5, 0))
        
        row += 1
        
        # Video overlay folder selection
        ttk.Label(main_frame, text="üé≠ Th∆∞ m·ª•c video overlay:").grid(row=row, column=0, sticky=tk.W, pady=5)
        video_entry = ttk.Entry(main_frame, textvariable=self.video_folder_path)
        video_entry.grid(row=row, column=1, sticky=(tk.W, tk.E), padx=(10, 5), pady=5)
        ttk.Button(main_frame, text="Ch·ªçn th∆∞ m·ª•c", command=self.select_video_folder).grid(row=row, column=2, padx=(5, 0), pady=5)
        row += 1        # Overlay configuration
        overlay_frame = ttk.Frame(main_frame)
        overlay_frame.grid(row=row, column=0, columnspan=3, pady=(10, 10), sticky=(tk.W, tk.E))
        
        ttk.Button(overlay_frame, text="üé¨ C·∫•u h√¨nh Video Overlay + Chroma Key", command=self.configure_video_overlay).pack(side=tk.LEFT, padx=(0, 10))
        row += 1
        
        # Status labels
        self.video_overlay_status = ttk.Label(main_frame, text="Ch∆∞a c·∫•u h√¨nh video overlay", foreground="gray")
        self.video_overlay_status.grid(row=row, column=0, columnspan=3, sticky=tk.W, pady=2)
        row += 1
          # Process button
        self.process_button = ttk.Button(
            main_frame,
            text="üöÄ B·∫Øt ƒë·∫ßu x·ª≠ l√Ω (Ph·ª• ƒë·ªÅ + Video Overlay + 9:16)",
            command=self.start_processing,
            style="Accent.TButton"
        )
        self.process_button.grid(row=row, column=0, columnspan=3, pady=(20, 10))
        row += 1
        
        # Progress bar
        self.progress_var = tk.DoubleVar()
        self.progress_bar = ttk.Progressbar(
            main_frame,
            variable=self.progress_var,
            mode='indeterminate'
        )
        self.progress_bar.grid(row=row, column=0, columnspan=3, sticky=(tk.W, tk.E), pady=(0, 10))
        row += 1
        
        # Status label
        self.status_label = ttk.Label(main_frame, text="S·∫µn s√†ng x·ª≠ l√Ω")
        self.status_label.grid(row=row, column=0, columnspan=3, pady=(0, 10))
        row += 1
        
        # Log output
        ttk.Label(main_frame, text="üìã Nh·∫≠t k√Ω x·ª≠ l√Ω:").grid(row=row, column=0, sticky=tk.W, pady=(10, 5))
        row += 1
        
        self.log_text = scrolledtext.ScrolledText(
            main_frame,
            height=15,
            width=80,
            wrap=tk.WORD
        )
        self.log_text.grid(row=row, column=0, columnspan=3, sticky=(tk.W, tk.E, tk.N, tk.S), pady=(0, 10))
        
        # Configure row weight for log text
        main_frame.rowconfigure(row, weight=1)
        
        # Initial log
        self.log_message("üé¨ GUI Video Overlay ƒë√£ s·∫µn s√†ng!")
        self.log_message("üí° H∆∞·ªõng d·∫´n: Ch·ªçn video, c·∫•u h√¨nh overlay, b·∫Øt ƒë·∫ßu x·ª≠ l√Ω")

    def select_input_video(self):
        """Ch·ªçn file video ƒë·∫ßu v√†o"""
        file_path = filedialog.askopenfilename(
            title="Ch·ªçn file video ƒë·∫ßu v√†o",
            filetypes=[
                ("Video files", "*.mp4 *.avi *.mov *.mkv *.wmv *.flv"),
                ("All files", "*.*")
            ]
        )
        if file_path:
            self.input_video_path.set(file_path)
            # T·ª± ƒë·ªông ƒë·∫∑t t√™n file ƒë·∫ßu ra
            input_path = Path(file_path)
            output_name = f"{input_path.stem}_with_overlay{input_path.suffix}"
            output_path = input_path.parent / output_name
            self.output_video_path.set(str(output_path))
            self.log_message(f"üìÅ ƒê√£ ch·ªçn video: {os.path.basename(file_path)}")
    
    def select_output_video(self):
        """Ch·ªçn v·ªã tr√≠ l∆∞u video ƒë·∫ßu ra"""
        file_path = filedialog.asksaveasfilename(
            title="L∆∞u video ƒë·∫ßu ra",
            defaultextension=".mp4",
            filetypes=[
                ("MP4 files", "*.mp4"),
                ("AVI files", "*.avi"),
                ("All files", "*.*")
            ]
        )
        if file_path:
            self.output_video_path.set(file_path)
            self.log_message(f"üíæ ƒê√£ ch·ªçn v·ªã tr√≠ l∆∞u: {os.path.basename(file_path)}")
    
    def select_video_folder(self):
        """Ch·ªçn th∆∞ m·ª•c ch·ª©a video overlay"""
        folder_path = filedialog.askdirectory(
            title="Ch·ªçn th∆∞ m·ª•c ch·ª©a video overlay",
            initialdir=self.video_folder_path.get() if self.video_folder_path.get() else "."
        )
        if folder_path:
            self.video_folder_path.set(folder_path)
            self.log_message(f"üìÅ ƒê√£ ch·ªçn th∆∞ m·ª•c video overlay: {folder_path}")
            
            # Ki·ªÉm tra file video trong th∆∞ m·ª•c
            video_files = []
            for ext in ['*.mp4', '*.avi', '*.mov', '*.mkv', '*.wmv']:
                video_files.extend(glob.glob(os.path.join(folder_path, ext)))
            
            if video_files:
                self.log_message(f"üé¨ T√¨m th·∫•y {len(video_files)} file video: {[os.path.basename(f) for f in video_files]}")
            else:
                self.log_message("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y file video n√†o trong th∆∞ m·ª•c")

    def configure_video_overlay(self):
        """C·∫•u h√¨nh video overlay v·ªõi chroma key"""
        if not self.video_folder_path.get():
            messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng ch·ªçn th∆∞ m·ª•c video overlay tr∆∞·ªõc!")
            return
        
        # T√¨m file video
        video_files = []
        folder_path = self.video_folder_path.get()
        
        for ext in ['*.mp4', '*.avi', '*.mov', '*.mkv', '*.wmv']:
            video_files.extend(glob.glob(os.path.join(folder_path, ext)))
        
        if not video_files:
            messagebox.showwarning("C·∫£nh b√°o", "Kh√¥ng t√¨m th·∫•y file video n√†o trong th∆∞ m·ª•c!")
            return
        
        self.show_video_overlay_dialog(video_files)
    
    def show_video_overlay_dialog(self, video_files):
        """Dialog c·∫•u h√¨nh video overlay"""
        
        dialog = tk.Toplevel(self.root)
        dialog.title("C·∫•u h√¨nh Video Overlay + Chroma Key")
        dialog.geometry("500x600")
        dialog.transient(self.root)
        dialog.grab_set()
        
        main_frame = ttk.Frame(dialog, padding="10")
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        # --- C√°c bi·∫øn control ---
        video_var = tk.StringVar()
        start_var = tk.StringVar(value="2")
        duration_var = tk.StringVar(value="10")
        position_var = tk.StringVar(value="top-right")
        size_var = tk.StringVar(value="25")
        chroma_enabled_var = tk.BooleanVar(value=True)
        chroma_color_var = tk.StringVar(value="green")
        advanced_mode_var = tk.BooleanVar(value=False)
        auto_hide_var = tk.BooleanVar(value=True)  # NEW: Default to auto hide
        
        # Custom position variables (declared here to avoid UnboundLocalError)
        custom_x_var = tk.StringVar(value="100")
        custom_y_var = tk.StringVar(value="100")
        
        # Size mode variables
        size_mode_var = tk.StringVar(value="percent")
        custom_width_var = tk.StringVar(value="300")
        custom_height_var = tk.StringVar(value="200")
        keep_aspect_var = tk.BooleanVar(value=True)
        
        # Advanced controls (hidden by default)
        custom_similarity_var = tk.DoubleVar(value=0.2)
        custom_blend_var = tk.DoubleVar(value=0.15)

        # --- N·∫°p l·∫°i c·∫•u h√¨nh ƒë√£ l∆∞u n·∫øu c√≥ ---
        if self.video_overlay_settings.get('enabled', False):
            prev = self.video_overlay_settings
            if prev.get('video_path'):
                video_basename = os.path.basename(prev['video_path'])
                all_basenames = [os.path.basename(f) for f in video_files]
                if video_basename in all_basenames:
                    video_var.set(video_basename)
            if prev.get('start_time') is not None:
                start_var.set(str(prev['start_time']))
            if prev.get('duration') is not None:
                duration_var.set(str(prev['duration']))
            if prev.get('position'):
                position_var.set(prev['position'])
            if prev.get('custom_x') is not None:
                custom_x_var.set(str(prev['custom_x']))
            if prev.get('custom_y') is not None:
                custom_y_var.set(str(prev['custom_y']))
            if prev.get('size_mode'):
                size_mode_var.set(prev['size_mode'])
            if prev.get('custom_width') is not None:
                custom_width_var.set(str(prev['custom_width']))
            if prev.get('custom_height') is not None:
                custom_height_var.set(str(prev['custom_height']))
            if prev.get('keep_aspect') is not None:
                keep_aspect_var.set(prev['keep_aspect'])
            if prev.get('size_percent') is not None:
                size_var.set(str(prev['size_percent']))
            if prev.get('chroma_key') is not None:
                chroma_enabled_var.set(prev['chroma_key'])
            if prev.get('chroma_color'):
                chroma_color_var.set(prev['chroma_color'])
            if prev.get('auto_hide') is not None:
                auto_hide_var.set(prev['auto_hide'])

        # --- Widgets ---
        ttk.Label(main_frame, text="Ch·ªçn video overlay:", font=("Arial", 10, "bold")).pack(anchor=tk.W, pady=(0, 5))
        video_combo = ttk.Combobox(main_frame, textvariable=video_var, 
                                values=[os.path.basename(f) for f in video_files], 
                                state="readonly")
        video_combo.pack(fill=tk.X, pady=(0, 10))
        if video_var.get() == "" and video_files:
            video_combo.current(0)

        # FIXED: Use consistent pack layout for timing section
        timing_frame = ttk.LabelFrame(main_frame, text="Th·ªùi gian", padding="10")
        timing_frame.pack(fill=tk.X, pady=(0, 10))
        
        # Start time
        start_frame = ttk.Frame(timing_frame)
        start_frame.pack(fill=tk.X, pady=2)
        ttk.Label(start_frame, text="B·∫Øt ƒë·∫ßu (gi√¢y):").pack(side=tk.LEFT)
        ttk.Entry(start_frame, textvariable=start_var, width=10).pack(side=tk.LEFT, padx=(10, 0))
        
        # Duration
        duration_frame = ttk.Frame(timing_frame)
        duration_frame.pack(fill=tk.X, pady=2)
        ttk.Label(duration_frame, text="Th·ªùi l∆∞·ª£ng t·ªëi ƒëa (gi√¢y):").pack(side=tk.LEFT)
        ttk.Entry(duration_frame, textvariable=duration_var, width=10).pack(side=tk.LEFT, padx=(10, 0))
        
        # FIXED: Auto hide option using pack
        auto_hide_frame = ttk.Frame(timing_frame)
        auto_hide_frame.pack(fill=tk.X, pady=(10, 0))
        ttk.Checkbutton(auto_hide_frame, 
                    text="T·ª± ƒë·ªông ·∫©n khi video overlay ch·∫°y h·∫øt", 
                    variable=auto_hide_var).pack(anchor=tk.W)
        ttk.Label(auto_hide_frame, 
                text="(Tr√°nh b·ªã ƒë·ª©ng h√¨nh ·ªü frame cu·ªëi)", 
                font=("Arial", 8), foreground="gray").pack(anchor=tk.W, padx=(20, 0))
        
        layout_frame = ttk.LabelFrame(main_frame, text="V·ªã tr√≠ & K√≠ch th∆∞·ªõc", padding="10")
        layout_frame.pack(fill=tk.X, pady=(0, 10))
        
        # Position
        pos_frame = ttk.Frame(layout_frame)
        pos_frame.pack(fill=tk.X, pady=2)
        ttk.Label(pos_frame, text="V·ªã tr√≠:").pack(side=tk.LEFT)
        position_combo = ttk.Combobox(pos_frame, textvariable=position_var, 
                    values=["center", "top-left", "top-right", "bottom-left", "bottom-right", "custom"], 
                    state="readonly", width=15)
        position_combo.pack(side=tk.LEFT, padx=(10, 0))
        
        # Custom position inputs (initially hidden)
        custom_pos_frame = ttk.Frame(layout_frame)
        
        ttk.Label(custom_pos_frame, text="T·ªça ƒë·ªô t√πy ch·ªânh:").pack(anchor=tk.W, pady=(5, 2))
        
        coord_frame = ttk.Frame(custom_pos_frame)
        coord_frame.pack(fill=tk.X, pady=2)
        
        ttk.Label(coord_frame, text="X:").pack(side=tk.LEFT)
        ttk.Entry(coord_frame, textvariable=custom_x_var, width=8).pack(side=tk.LEFT, padx=(5, 10))
        
        ttk.Label(coord_frame, text="Y:").pack(side=tk.LEFT)
        ttk.Entry(coord_frame, textvariable=custom_y_var, width=8).pack(side=tk.LEFT, padx=(5, 10))
        
        ttk.Label(coord_frame, text="(pixel t·ª´ g√≥c tr√™n-tr√°i)", 
                 font=("Arial", 8), foreground="gray").pack(side=tk.LEFT, padx=(10, 0))
        
        # Show/hide custom position controls
        def toggle_custom_position(*args):
            if position_var.get() == "custom":
                custom_pos_frame.pack(fill=tk.X, pady=(5, 0))
            else:
                custom_pos_frame.pack_forget()
        
        position_var.trace('w', toggle_custom_position)
        
        # Size
        size_frame = ttk.Frame(layout_frame)
        size_frame.pack(fill=tk.X, pady=2)
        
        # Size mode selection
        size_mode_frame = ttk.Frame(size_frame)
        size_mode_frame.pack(fill=tk.X, pady=(0, 5))
        
        ttk.Label(size_mode_frame, text="Ch·∫ø ƒë·ªô k√≠ch th∆∞·ªõc:").pack(side=tk.LEFT)
        size_mode_combo = ttk.Combobox(size_mode_frame, textvariable=size_mode_var,
                    values=["percent", "pixels"], state="readonly", width=12)
        size_mode_combo.pack(side=tk.LEFT, padx=(10, 0))
        
        # Percent mode (original)
        percent_frame = ttk.Frame(size_frame)
        percent_frame.pack(fill=tk.X, pady=2)
        ttk.Label(percent_frame, text="K√≠ch th∆∞·ªõc (% chi·ªÅu cao):").pack(side=tk.LEFT)
        ttk.Entry(percent_frame, textvariable=size_var, width=10).pack(side=tk.LEFT, padx=(10, 0))
        
        # Pixel mode (new)
        pixel_frame = ttk.Frame(size_frame)
        
        ttk.Label(pixel_frame, text="K√≠ch th∆∞·ªõc c·ª• th·ªÉ (pixels):").pack(anchor=tk.W, pady=(0, 2))
        
        pixel_controls_frame = ttk.Frame(pixel_frame)
        pixel_controls_frame.pack(fill=tk.X, pady=2)
        
        ttk.Label(pixel_controls_frame, text="R·ªông:").pack(side=tk.LEFT)
        ttk.Entry(pixel_controls_frame, textvariable=custom_width_var, width=8).pack(side=tk.LEFT, padx=(5, 15))
        
        ttk.Label(pixel_controls_frame, text="Cao:").pack(side=tk.LEFT)
        ttk.Entry(pixel_controls_frame, textvariable=custom_height_var, width=8).pack(side=tk.LEFT, padx=(5, 15))
        
        ttk.Label(pixel_controls_frame, text="(pixel)", 
                 font=("Arial", 8), foreground="gray").pack(side=tk.LEFT, padx=(10, 0))
        
        # Aspect ratio lock option
        aspect_frame = ttk.Frame(pixel_frame)
        aspect_frame.pack(fill=tk.X, pady=(5, 0))
        
        ttk.Checkbutton(aspect_frame, text="Gi·ªØ t·ª∑ l·ªá khung h√¨nh g·ªëc", 
                       variable=keep_aspect_var).pack(anchor=tk.W)
        
        # Show/hide size controls based on mode
        def toggle_size_mode(*args):
            if size_mode_var.get() == "percent":
                percent_frame.pack(fill=tk.X, pady=2)
                pixel_frame.pack_forget()
            else:
                percent_frame.pack_forget()
                pixel_frame.pack(fill=tk.X, pady=2)
        
        size_mode_var.trace('w', toggle_size_mode)
        
        # Simplified Chroma Key section
        chroma_frame = ttk.LabelFrame(main_frame, text="X√≥a n·ªÅn (Chroma Key)", padding="10")
        chroma_frame.pack(fill=tk.X, pady=(0, 10))
        
        # Enable chroma key
        ttk.Checkbutton(chroma_frame, text="X√≥a n·ªÅn video overlay", variable=chroma_enabled_var).pack(anchor=tk.W, pady=(0, 10))
        
        # Color selection
        color_frame = ttk.Frame(chroma_frame)
        color_frame.pack(fill=tk.X, pady=(0, 10))
        ttk.Label(color_frame, text="Ch·ªçn m√†u n·ªÅn c·∫ßn x√≥a:").pack(side=tk.LEFT)
        color_combo = ttk.Combobox(color_frame, textvariable=chroma_color_var,
                    values=["green", "blue", "black", "white", "cyan", "red", "magenta", "yellow"],
                    state="readonly", width=12)
        color_combo.pack(side=tk.LEFT, padx=(10, 0))
        
        # Current settings display
        settings_label = ttk.Label(chroma_frame, text="", font=("Arial", 9), foreground="blue")
        settings_label.pack(anchor=tk.W)
        
        # Update settings display when color changes
        def update_settings_display(*args):
            color = chroma_color_var.get()
            if color in OPTIMAL_CHROMA_REMOVAL:
                similarity, blend = OPTIMAL_CHROMA_REMOVAL[color]
                settings_label.config(text=f"T·ª± ƒë·ªông √°p d·ª•ng: Similarity={similarity}, Blend={blend}")
                # Update custom controls
                custom_similarity_var.set(similarity)
                custom_blend_var.set(blend)
            else:
                settings_label.config(text="S·ª≠ d·ª•ng settings m·∫∑c ƒë·ªãnh")
                custom_similarity_var.set(0.15)
                custom_blend_var.set(0.1)
        
        chroma_color_var.trace('w', update_settings_display)
        update_settings_display()  # Initial update
        
        # Advanced mode toggle
        ttk.Checkbutton(chroma_frame, text="Hi·ªÉn th·ªã c√†i ƒë·∫∑t n√¢ng cao", variable=advanced_mode_var).pack(anchor=tk.W, pady=(10, 0))
        
        # Advanced controls frame (initially hidden)
        advanced_frame = ttk.Frame(chroma_frame)
        
        # Similarity control
        sim_frame = ttk.Frame(advanced_frame)
        sim_frame.pack(fill=tk.X, pady=2)
        ttk.Label(sim_frame, text="Similarity:").pack(side=tk.LEFT)
        similarity_scale = ttk.Scale(sim_frame, from_=0.001, to=0.5, variable=custom_similarity_var, orient=tk.HORIZONTAL, length=150)
        similarity_scale.pack(side=tk.LEFT, padx=(10, 5))
        similarity_value_label = ttk.Label(sim_frame, text="0.200")
        similarity_value_label.pack(side=tk.LEFT)
        
        # Blend control
        blend_frame = ttk.Frame(advanced_frame)
        blend_frame.pack(fill=tk.X, pady=2)
        ttk.Label(blend_frame, text="Blend:").pack(side=tk.LEFT)
        blend_scale = ttk.Scale(blend_frame, from_=0.001, to=0.5, variable=custom_blend_var, orient=tk.HORIZONTAL, length=150)
        blend_scale.pack(side=tk.LEFT, padx=(10, 5))
        blend_value_label = ttk.Label(blend_frame, text="0.150")
        blend_value_label.pack(side=tk.LEFT)
        
        # Update value labels
        def update_similarity_label(*args):
            similarity_value_label.config(text=f"{custom_similarity_var.get():.3f}")
        def update_blend_label(*args):
            blend_value_label.config(text=f"{custom_blend_var.get():.3f}")
        
        custom_similarity_var.trace('w', update_similarity_label)
        custom_blend_var.trace('w', update_blend_label)
        
        # Show/hide advanced controls
        def toggle_advanced_mode(*args):
            if advanced_mode_var.get():
                advanced_frame.pack(fill=tk.X, pady=(5, 0))
            else:
                advanced_frame.pack_forget()
                # Reset to optimal values when hiding
                update_settings_display()
        
        advanced_mode_var.trace('w', toggle_advanced_mode)
        
        button_frame = ttk.Frame(main_frame)
        button_frame.pack(fill=tk.X, pady=(10, 0))
        
        def save_video_overlay():
            try:
                selected_video = video_var.get()
                if not selected_video:
                    messagebox.showerror("L·ªói", "Vui l√≤ng ch·ªçn video!")
                    return
                    
                # T√¨m ƒë∆∞·ªùng d·∫´n video g·ªëc t·ª´ t√™n file
                video_path = None
                for f in video_files:
                    if os.path.basename(f) == selected_video:
                        video_path = f
                        break
                        
                start_time = float(start_var.get())
                duration = float(duration_var.get()) if duration_var.get().strip() else None
                
                # L·∫•y k√≠ch th∆∞·ªõc
                size_mode = size_mode_var.get()
                custom_width = None
                custom_height = None
                keep_aspect = keep_aspect_var.get()
                
                if size_mode == "pixels":
                    try:
                        custom_width = int(custom_width_var.get())
                        custom_height = int(custom_height_var.get())
                        size = None  # Kh√¥ng s·ª≠ d·ª•ng size_percent khi d√πng pixel
                    except ValueError:
                        messagebox.showerror("L·ªói", "Chi·ªÅu r·ªông v√† chi·ªÅu cao ph·∫£i l√† s·ªë nguy√™n!")
                        return
                else:
                    size = int(size_var.get())
                
                # L·∫•y chroma settings
                chroma_color = chroma_color_var.get()
                
                if advanced_mode_var.get():
                    # Use custom values from sliders
                    similarity = custom_similarity_var.get()
                    blend = custom_blend_var.get()
                    print(f"DEBUG GUI: Using advanced mode - similarity={similarity}, blend={blend}")
                else:
                    # Use optimal values for selected color
                    similarity, blend = OPTIMAL_CHROMA_REMOVAL.get(chroma_color, (0.15, 0.1))
                    print(f"DEBUG GUI: Using optimal for {chroma_color} - similarity={similarity}, blend={blend}")
                
                # L·∫•y v·ªã tr√≠
                position = position_var.get()
                custom_x = None
                custom_y = None
                
                if position == "custom":
                    try:
                        custom_x = int(custom_x_var.get())
                        custom_y = int(custom_y_var.get())
                    except ValueError:
                        messagebox.showerror("L·ªói", "T·ªça ƒë·ªô X, Y ph·∫£i l√† s·ªë nguy√™n!")
                        return
                
                self.video_overlay_settings = {
                    'enabled': True,
                    'video_path': video_path,
                    'start_time': start_time,
                    'duration': duration,
                    'position': position,
                    'custom_x': custom_x,
                    'custom_y': custom_y,
                    'size_mode': size_mode,
                    'size_percent': size if size_mode == "percent" else None,
                    'custom_width': custom_width,
                    'custom_height': custom_height,
                    'keep_aspect': keep_aspect,
                    'chroma_key': chroma_enabled_var.get(),
                    'chroma_color': chroma_color,
                    'chroma_similarity': similarity,
                    'chroma_blend': blend,
                    'auto_hide': auto_hide_var.get()  # NEW: Save auto hide setting
                }
                
                # DEBUG: In ra to√†n b·ªô settings
                print(f"DEBUG GUI: video_overlay_settings={self.video_overlay_settings}")
                
                # Update status message
                auto_hide_text = " (auto-hide)" if auto_hide_var.get() else " (freeze)"
                position_text = f" | {position}"
                if position == "custom" and custom_x is not None and custom_y is not None:
                    position_text = f" | custom({custom_x},{custom_y})"
                
                size_text = ""
                if size_mode == "pixels":
                    size_text = f" | {custom_width}x{custom_height}px"
                    if keep_aspect:
                        size_text += " (t·ª∑ l·ªá g·ªëc)"
                else:
                    size_text = f" | {size}%"
                
                self.video_overlay_status.config(
                    text=f"ƒê√£ c·∫•u h√¨nh: {selected_video}{position_text}{size_text} | {chroma_color} ({similarity:.3f}, {blend:.3f}){auto_hide_text}", 
                    foreground="green"
                )
                
                self.log_message(f"Saved chroma: {chroma_color} v·ªõi optimal settings ({similarity:.3f}, {blend:.3f}), auto_hide={auto_hide_var.get()}")
                dialog.destroy()
                
            except Exception as e:
                messagebox.showerror("L·ªói", f"Gi√° tr·ªã kh√¥ng h·ª£p l·ªá: {e}")

        ttk.Button(button_frame, text="L∆∞u", command=save_video_overlay).pack(side=tk.LEFT, padx=(0, 10))
        ttk.Button(button_frame, text="H·ªßy", command=dialog.destroy).pack(side=tk.RIGHT)
    
    def _get_chroma_values_for_preset(self, color, preset):
        """Convert color + preset th√†nh similarity, blend values"""
        
        # Tham s·ªë t·ªëi ∆∞u cho t·ª´ng m√†u
        color_settings = {
            "green": {
                "loose": (0.3, 0.25),
                "normal": (0.15, 0.1),
                "custom": (0.2, 0.15),  # Green optimized
                "strict": (0.08, 0.05),
                "very_strict": (0.03, 0.02),
                "ultra_strict": (0.01, 0.005)
            },
            "black": {
                "loose": (0.05, 0.03),
                "normal": (0.02, 0.015),
                "custom": (0.01, 0.005),  # Black precision
                "strict": (0.005, 0.003),
                "very_strict": (0.001, 0.001),
                "ultra_strict": (0.0005, 0.0005)
            },
            "blue": {
                "loose": (0.35, 0.3),
                "normal": (0.2, 0.15),
                "custom": (0.25, 0.2),   # Blue optimized
                "strict": (0.1, 0.08),
                "very_strict": (0.05, 0.03),
                "ultra_strict": (0.02, 0.01)
            },
            "cyan": {
                "loose": (0.25, 0.2),
                "normal": (0.12, 0.08),
                "custom": (0.15, 0.1),   # Cyan optimized
                "strict": (0.06, 0.04),
                "very_strict": (0.03, 0.02),
                "ultra_strict": (0.01, 0.005)
            },
            "red": {
                "loose": (0.4, 0.35),
                "normal": (0.25, 0.2),
                "custom": (0.3, 0.25),   # Red optimized (harder to key)
                "strict": (0.15, 0.1),
                "very_strict": (0.08, 0.05),
                "ultra_strict": (0.03, 0.02)
            },
            "magenta": {
                "loose": (0.3, 0.25),
                "normal": (0.18, 0.12),
                "custom": (0.22, 0.18),  # Magenta optimized
                "strict": (0.1, 0.08),
                "very_strict": (0.05, 0.03),
                "ultra_strict": (0.02, 0.01)
            },
            "yellow": {
                "loose": (0.35, 0.3),
                "normal": (0.22, 0.18),
                "custom": (0.28, 0.22),  # Yellow optimized (skin tone conflict)
                "strict": (0.12, 0.1),
                "very_strict": (0.06, 0.04),
                "ultra_strict": (0.03, 0.02)
            }
        }
        
        # Default fallback cho m√†u kh√°c
        default_settings = {
            "loose": (0.3, 0.25),
            "normal": (0.15, 0.1),
            "custom": (0.2, 0.15),
            "strict": (0.05, 0.03),
            "very_strict": (0.01, 0.005),
            "ultra_strict": (0.005, 0.003)
        }
        
        color_map = color_settings.get(color.lower(), default_settings)
        return color_map.get(preset.lower(), (0.2, 0.15))

    def log_message(self, message):
        """Th√™m th√¥ng ƒëi·ªáp v√†o log"""
        self.log_text.insert(tk.END, f"{message}\n")
        self.log_text.see(tk.END)
        self.root.update_idletasks()
    
    def update_status(self, status):
        """C·∫≠p nh·∫≠t tr·∫°ng th√°i"""
        self.status_label.config(text=status)
        self.root.update_idletasks()

    def start_processing(self):
        """B·∫Øt ƒë·∫ßu x·ª≠ l√Ω video v·ªõi c√°c tu·ª≥ ch·ªçn hi·ªán t·∫°i"""
        try:
            # L·∫•y th√¥ng tin t·ª´ GUI
            input_video_path = self.input_video_path.get()
            output_video_path = self.output_video_path.get()
            source_language = self.source_language.get()
            target_language = self.target_language.get()
            video_overlay_settings = self.video_overlay_settings
            words_per_line = self.words_per_line.get()

            # Ki·ªÉm tra ƒë·∫ßu v√†o
            if not input_video_path or not output_video_path:
                messagebox.showwarning("Thi·∫øu th√¥ng tin", "Vui l√≤ng ch·ªçn file video ƒë·∫ßu v√†o v√† v·ªã tr√≠ l∆∞u file ƒë·∫ßu ra.")
                return

            # --- B·ªî SUNG LOGIC T·ª∞ ƒê·ªòNG √ÅP D·ª§NG CHROMA CUSTOM ---
            if not video_overlay_settings or not video_overlay_settings.get('enabled', False):
                # C√≥ th·ªÉ ch·ªâ ƒë·ªãnh s·∫µn m·ªôt video overlay m·∫∑c ƒë·ªãnh n·∫øu mu·ªën, ho·∫∑c ƒë·ªÉ None
                self.video_overlay_settings = {
                    'enabled': True,
                    'video_path': None,       # N·∫øu mu·ªën m·∫∑c ƒë·ªãnh l√† None, ho·∫∑c ch·ªâ ƒë·ªãnh path overlay video
                    'start_time': 2,
                    'duration': 8,
                    'position': 'top-right',
                    'size_percent': 25,
                    'chroma_key': True,
                    'chroma_color': 'green',
                    'chroma_sensitivity': 'custom'
                }
                video_overlay_settings = self.video_overlay_settings
            # --- END ---

            self.status_label.config(text="‚è≥ ƒêang x·ª≠ l√Ω... Vui l√≤ng ch·ªù.")
            self.progress_var.set(0)
            self.progress_bar.start()

            # Th·ª±c hi·ªán x·ª≠ l√Ω trong thread ri√™ng ƒë·ªÉ kh√¥ng block GUI
            def worker():
                try:
                    self.log_message("üöÄ B·∫Øt ƒë·∫ßu x·ª≠ l√Ω video t·ª± ƒë·ªông...")
                    editor = AutoVideoEditor()  # import ·ªü ƒë·∫ßu file: from main import AutoVideoEditor
                    editor.process_video(
                        input_video_path=input_video_path,
                        output_video_path=output_video_path,
                        source_language=source_language,
                        target_language=target_language,
                        video_overlay_settings=video_overlay_settings,
                        words_per_line=words_per_line
                    )
                    self.status_label.config(text="‚úÖ Ho√†n th√†nh!")
                    self.log_message("‚úÖ X·ª≠ l√Ω xong! File k·∫øt qu·∫£ ƒë√£ l∆∞u.")
                except Exception as e:
                    self.status_label.config(text="‚ùå L·ªói x·ª≠ l√Ω!")
                    self.log_message(f"‚ùå L·ªói: {e}")
                finally:
                    self.progress_bar.stop()
                    self.progress_var.set(0)

            threading.Thread(target=worker, daemon=True).start()

        except Exception as e:
            self.status_label.config(text="‚ùå L·ªói x·ª≠ l√Ω!")
            self.log_message(f"‚ùå L·ªói: {e}")


def main():
    root = tk.Tk()
    app = VideoEditorGUI(root)
    
    try:
        root.mainloop()
    except KeyboardInterrupt:
        pass

if __name__ == "__main__":
    main()
