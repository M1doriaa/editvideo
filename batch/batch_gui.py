#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Batch GUI Module - Giao di·ªán x·ª≠ l√Ω h√†ng lo·∫°t
"""

import tkinter as tk
from tkinter import ttk, filedialog, messagebox
import threading
import os
import time
from datetime import datetime
from .batch_processor import BatchProcessor, create_batch_config

class BatchProcessingGUI:
    """GUI cho batch processing"""
    
    def __init__(self, parent):
        self.parent = parent
        self.processor = None
        self.processing = False
        
        self.create_batch_window()
        
    def create_batch_window(self):
        """T·∫°o c·ª≠a s·ªï batch processing"""
        self.window = tk.Toplevel(self.parent)
        self.window.title("üé¨ Batch Processing - X·ª≠ l√Ω h√†ng lo·∫°t Video")
        self.window.geometry("800x700")
        self.window.transient(self.parent)
        self.window.grab_set()
        
        # Center window
        self.window.geometry("+%d+%d" % (
            self.parent.winfo_rootx() + 50,
            self.parent.winfo_rooty() + 50
        ))
        
        self.create_widgets()
        
    def create_widgets(self):
        """T·∫°o c√°c widget"""
        main_frame = ttk.Frame(self.window, padding="20")
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        # Title
        title_label = ttk.Label(
            main_frame,
            text="üé¨ Batch Processing - X·ª≠ l√Ω h√†ng lo·∫°t Video",
            font=("Arial", 16, "bold")
        )
        title_label.pack(pady=(0, 20))
        
        # Input/Output section
        self.create_folder_selection(main_frame)
        
        # Configuration section
        self.create_config_section(main_frame)
        
        # Processing settings
        self.create_processing_settings(main_frame)
        
        # Progress section
        self.create_progress_section(main_frame)
        
        # Control buttons
        self.create_control_buttons(main_frame)
        
        # Results log
        self.create_results_section(main_frame)
        
    def create_folder_selection(self, parent):
        """T·∫°o ph·∫ßn ch·ªçn th∆∞ m·ª•c"""
        folder_frame = ttk.LabelFrame(parent, text="üìÅ Th∆∞ m·ª•c Input/Output", padding="10")
        folder_frame.pack(fill=tk.X, pady=(0, 15))
        
        # Input folder
        ttk.Label(folder_frame, text="üé• Th∆∞ m·ª•c video input:").grid(row=0, column=0, sticky=tk.W, pady=5)
        self.input_folder_var = tk.StringVar()
        input_entry = ttk.Entry(folder_frame, textvariable=self.input_folder_var, width=50)
        input_entry.grid(row=0, column=1, sticky=(tk.W, tk.E), padx=(10, 5), pady=5)
        ttk.Button(folder_frame, text="Ch·ªçn", command=self.select_input_folder).grid(row=0, column=2, padx=(5, 0), pady=5)
        
        # Output folder
        ttk.Label(folder_frame, text="üíæ Th∆∞ m·ª•c output:").grid(row=1, column=0, sticky=tk.W, pady=5)
        self.output_folder_var = tk.StringVar()
        output_entry = ttk.Entry(folder_frame, textvariable=self.output_folder_var, width=50)
        output_entry.grid(row=1, column=1, sticky=(tk.W, tk.E), padx=(10, 5), pady=5)
        ttk.Button(folder_frame, text="Ch·ªçn", command=self.select_output_folder).grid(row=1, column=2, padx=(5, 0), pady=5)
        
        folder_frame.columnconfigure(1, weight=1)
        
    def create_config_section(self, parent):
        """T·∫°o ph·∫ßn c·∫•u h√¨nh"""
        config_frame = ttk.LabelFrame(parent, text="‚öôÔ∏è C·∫•u h√¨nh x·ª≠ l√Ω", padding="10")
        config_frame.pack(fill=tk.X, pady=(0, 15))
        
        # Language settings
        lang_frame = ttk.Frame(config_frame)
        lang_frame.pack(fill=tk.X, pady=5)
        
        ttk.Label(lang_frame, text="üåê Ng√¥n ng·ªØ g·ªëc:").pack(side=tk.LEFT)
        self.source_lang_var = tk.StringVar(value="vi")
        lang_combo = ttk.Combobox(
            lang_frame,
            textvariable=self.source_lang_var,
            values=["vi", "en", "ja", "ko", "zh", "es", "fr", "de"],
            state="readonly",
            width=10
        )
        lang_combo.pack(side=tk.LEFT, padx=(10, 20))
        
        ttk.Label(lang_frame, text="üéØ Ng√¥n ng·ªØ ƒë√≠ch:").pack(side=tk.LEFT)
        self.target_lang_var = tk.StringVar(value="en")
        target_combo = ttk.Combobox(
            lang_frame,
            textvariable=self.target_lang_var,
            values=["en", "vi", "ja", "ko", "zh", "es", "fr", "de"],
            state="readonly",
            width=10
        )
        target_combo.pack(side=tk.LEFT, padx=(10, 0))
        
        # Overlay settings
        overlay_frame = ttk.Frame(config_frame)
        overlay_frame.pack(fill=tk.X, pady=5)
        
        self.custom_timeline_var = tk.BooleanVar()
        ttk.Checkbutton(
            overlay_frame,
            text="üéØ S·ª≠ d·ª•ng Custom Timeline (3 ·∫£nh)",
            variable=self.custom_timeline_var
        ).pack(side=tk.LEFT)
        
        # Image folder
        img_frame = ttk.Frame(config_frame)
        img_frame.pack(fill=tk.X, pady=5)
        
        ttk.Label(img_frame, text="üñºÔ∏è Th∆∞ m·ª•c ·∫£nh overlay:").pack(side=tk.LEFT)
        self.img_folder_var = tk.StringVar()
        img_entry = ttk.Entry(img_frame, textvariable=self.img_folder_var, width=30)
        img_entry.pack(side=tk.LEFT, padx=(10, 5))
        ttk.Button(img_frame, text="Ch·ªçn", command=self.select_img_folder).pack(side=tk.LEFT)
        
    def create_processing_settings(self, parent):
        """T·∫°o ph·∫ßn c√†i ƒë·∫∑t x·ª≠ l√Ω"""
        settings_frame = ttk.LabelFrame(parent, text="‚ö° C√†i ƒë·∫∑t x·ª≠ l√Ω", padding="10")
        settings_frame.pack(fill=tk.X, pady=(0, 15))
        
        # Workers count
        workers_frame = ttk.Frame(settings_frame)
        workers_frame.pack(fill=tk.X, pady=5)
        
        ttk.Label(workers_frame, text="üë• S·ªë worker ƒë·ªìng th·ªùi:").pack(side=tk.LEFT)
        self.workers_var = tk.IntVar(value=3)
        workers_spin = ttk.Spinbox(
            workers_frame,
            from_=1, to=8, increment=1,
            textvariable=self.workers_var,
            width=10
        )
        workers_spin.pack(side=tk.LEFT, padx=(10, 20))
        
        ttk.Label(workers_frame, text="(Khuy·∫øn ngh·ªã: 2-4 workers)", foreground="gray").pack(side=tk.LEFT)
        
        # Video extensions
        ext_frame = ttk.Frame(settings_frame)
        ext_frame.pack(fill=tk.X, pady=5)
        
        ttk.Label(ext_frame, text="üìº ƒê·ªãnh d·∫°ng video:").pack(side=tk.LEFT)
        self.extensions_var = tk.StringVar(value=".mp4,.avi,.mov,.mkv")
        ext_entry = ttk.Entry(ext_frame, textvariable=self.extensions_var, width=30)
        ext_entry.pack(side=tk.LEFT, padx=(10, 0))
        
    def create_progress_section(self, parent):
        """T·∫°o ph·∫ßn hi·ªÉn th·ªã ti·∫øn ƒë·ªô"""
        progress_frame = ttk.LabelFrame(parent, text="üìä Ti·∫øn ƒë·ªô x·ª≠ l√Ω", padding="10")
        progress_frame.pack(fill=tk.X, pady=(0, 15))
        
        # Status
        self.status_label = ttk.Label(progress_frame, text="S·∫µn s√†ng", font=("Arial", 10, "bold"))
        self.status_label.pack(pady=5)
        
        # Progress bar
        self.progress_var = tk.DoubleVar()
        self.progress_bar = ttk.Progressbar(
            progress_frame,
            variable=self.progress_var,
            maximum=100,
            length=400
        )
        self.progress_bar.pack(fill=tk.X, pady=5)
        
        # Statistics
        stats_frame = ttk.Frame(progress_frame)
        stats_frame.pack(fill=tk.X, pady=5)
        
        self.stats_labels = {}
        stats_info = [
            ("total", "üìä T·ªïng:"),
            ("completed", "‚úÖ Ho√†n th√†nh:"),
            ("failed", "‚ùå Th·∫•t b·∫°i:"),
            ("remaining", "‚è≥ C√≤n l·∫°i:")
        ]
        
        for i, (key, text) in enumerate(stats_info):
            ttk.Label(stats_frame, text=text).grid(row=0, column=i*2, sticky=tk.W, padx=(0, 5))
            label = ttk.Label(stats_frame, text="0", font=("Arial", 10, "bold"))
            label.grid(row=0, column=i*2+1, sticky=tk.W, padx=(0, 20))
            self.stats_labels[key] = label
            
    def create_control_buttons(self, parent):
        """T·∫°o n√∫t ƒëi·ªÅu khi·ªÉn"""
        button_frame = ttk.Frame(parent)
        button_frame.pack(fill=tk.X, pady=(0, 15))
        
        self.scan_button = ttk.Button(
            button_frame,
            text="üîç Qu√©t video",
            command=self.scan_videos
        )
        self.scan_button.pack(side=tk.LEFT, padx=(0, 10))
        
        self.start_button = ttk.Button(
            button_frame,
            text="üöÄ B·∫Øt ƒë·∫ßu x·ª≠ l√Ω",
            command=self.start_processing,
            state="disabled"
        )
        self.start_button.pack(side=tk.LEFT, padx=(0, 10))
        
        self.stop_button = ttk.Button(
            button_frame,
            text="‚èπÔ∏è D·ª´ng",
            command=self.stop_processing,
            state="disabled"
        )
        self.stop_button.pack(side=tk.LEFT, padx=(0, 10))
        
        self.export_button = ttk.Button(
            button_frame,
            text="üìÑ Xu·∫•t b√°o c√°o",
            command=self.export_report,
            state="disabled"
        )
        self.export_button.pack(side=tk.LEFT, padx=(0, 10))
        
        ttk.Button(button_frame, text="‚ùå ƒê√≥ng", command=self.window.destroy).pack(side=tk.RIGHT)
        
    def create_results_section(self, parent):
        """T·∫°o ph·∫ßn hi·ªÉn th·ªã k·∫øt qu·∫£"""
        results_frame = ttk.LabelFrame(parent, text="üìù Log x·ª≠ l√Ω", padding="10")
        results_frame.pack(fill=tk.BOTH, expand=True)
        
        # Text widget with scrollbar
        text_frame = ttk.Frame(results_frame)
        text_frame.pack(fill=tk.BOTH, expand=True)
        
        self.log_text = tk.Text(text_frame, height=10, wrap=tk.WORD)
        scrollbar = ttk.Scrollbar(text_frame, orient="vertical", command=self.log_text.yview)
        self.log_text.configure(yscrollcommand=scrollbar.set)
        
        self.log_text.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        
    # Event handlers
    def select_input_folder(self):
        """Ch·ªçn th∆∞ m·ª•c input"""
        folder = filedialog.askdirectory(title="Ch·ªçn th∆∞ m·ª•c ch·ª©a video")
        if folder:
            self.input_folder_var.set(folder)
            
    def select_output_folder(self):
        """Ch·ªçn th∆∞ m·ª•c output"""
        folder = filedialog.askdirectory(title="Ch·ªçn th∆∞ m·ª•c l∆∞u video ƒë√£ x·ª≠ l√Ω")
        if folder:
            self.output_folder_var.set(folder)
            
    def select_img_folder(self):
        """Ch·ªçn th∆∞ m·ª•c ·∫£nh"""
        folder = filedialog.askdirectory(title="Ch·ªçn th∆∞ m·ª•c ·∫£nh overlay")
        if folder:
            self.img_folder_var.set(folder)
            
    def scan_videos(self):
        """Qu√©t video trong th∆∞ m·ª•c"""
        input_folder = self.input_folder_var.get()
        if not input_folder:
            messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng ch·ªçn th∆∞ m·ª•c input!")
            return
            
        if not os.path.exists(input_folder):
            messagebox.showerror("L·ªói", "Th∆∞ m·ª•c input kh√¥ng t·ªìn t·∫°i!")
            return
            
        try:
            # Get extensions
            extensions = [ext.strip() for ext in self.extensions_var.get().split(',')]
            
            # Scan videos
            video_files = []
            for filename in os.listdir(input_folder):
                name, ext = os.path.splitext(filename.lower())
                if ext in extensions:
                    video_files.append(filename)
                    
            self.log_message(f"üîç T√¨m th·∫•y {len(video_files)} video trong th∆∞ m·ª•c:")
            for video in video_files[:10]:  # Show first 10
                self.log_message(f"   üìº {video}")
            if len(video_files) > 10:
                self.log_message(f"   ... v√† {len(video_files) - 10} video kh√°c")
                
            if video_files:
                self.start_button.config(state="normal")
                self.stats_labels['total'].config(text=str(len(video_files)))
            else:
                self.log_message("‚ùå Kh√¥ng t√¨m th·∫•y video n√†o!")
                
        except Exception as e:
            messagebox.showerror("L·ªói", f"L·ªói qu√©t video: {str(e)}")
            
    def start_processing(self):
        """B·∫Øt ƒë·∫ßu x·ª≠ l√Ω h√†ng lo·∫°t"""
        # Validation
        if not self.input_folder_var.get() or not self.output_folder_var.get():
            messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng ch·ªçn th∆∞ m·ª•c input v√† output!")
            return
            
        try:
            # Create processor
            self.processor = BatchProcessor(max_workers=self.workers_var.get())
            
            # Create config
            config = create_batch_config(
                source_lang=self.source_lang_var.get(),
                target_lang=self.target_lang_var.get(),
                img_folder=self.img_folder_var.get() if self.img_folder_var.get() else None,
                custom_timeline=self.custom_timeline_var.get()
            )
            
            # Add videos
            extensions = [ext.strip() for ext in self.extensions_var.get().split(',')]
            count = self.processor.add_folder_videos(
                self.input_folder_var.get(),
                self.output_folder_var.get(),
                config,
                extensions
            )
            
            if count == 0:
                messagebox.showwarning("C·∫£nh b√°o", "Kh√¥ng c√≥ video n√†o ƒë·ªÉ x·ª≠ l√Ω!")
                return
                
            # Update UI
            self.processing = True
            self.start_button.config(state="disabled")
            self.stop_button.config(state="normal")
            self.scan_button.config(state="disabled")
            
            # Start processing
            self.processor.start_processing(progress_callback=self.update_progress)
            
            self.log_message(f"üöÄ B·∫Øt ƒë·∫ßu x·ª≠ l√Ω {count} video v·ªõi {self.workers_var.get()} workers")
            
            # Start monitoring thread
            monitor_thread = threading.Thread(target=self.monitor_completion)
            monitor_thread.daemon = True
            monitor_thread.start()
            
        except Exception as e:
            messagebox.showerror("L·ªói", f"L·ªói b·∫Øt ƒë·∫ßu x·ª≠ l√Ω: {str(e)}")
            
    def stop_processing(self):
        """D·ª´ng x·ª≠ l√Ω"""
        if self.processor:
            self.processor.stop_processing()
            
        self.processing = False
        self.start_button.config(state="normal")
        self.stop_button.config(state="disabled")
        self.scan_button.config(state="normal")
        self.export_button.config(state="normal")
        
        self.log_message("‚èπÔ∏è ƒê√£ d·ª´ng x·ª≠ l√Ω")
        
    def update_progress(self, progress):
        """C·∫≠p nh·∫≠t ti·∫øn ƒë·ªô"""
        self.progress_var.set(progress['percentage'])
        self.status_label.config(text=f"ƒêang x·ª≠ l√Ω... {progress['percentage']:.1f}%")
        
        # Update stats
        for key in ['total', 'completed', 'failed', 'remaining']:
            if key in progress:
                self.stats_labels[key].config(text=str(progress[key]))
                
    def monitor_completion(self):
        """Monitor ho√†n th√†nh"""
        while self.processing and self.processor:
            # Check if completed
            stats = self.processor.get_statistics()
            total_processed = stats['completed'] + stats['failed']
            
            if total_processed >= stats['total']:
                # Completed
                self.window.after(100, self.on_completion)
                break
                
            time.sleep(1)
            
    def on_completion(self):
        """Khi ho√†n th√†nh x·ª≠ l√Ω"""
        self.stop_processing()
        
        if self.processor:
            stats = self.processor.get_statistics()
            self.log_message(f"üéâ Ho√†n th√†nh x·ª≠ l√Ω!")
            self.log_message(f"   ‚úÖ Th√†nh c√¥ng: {stats['completed']}")
            self.log_message(f"   ‚ùå Th·∫•t b·∫°i: {stats['failed']}")
            self.log_message(f"   üìä T·ªïng c·ªông: {stats['total']}")
            
            if 'total_duration' in stats:
                self.log_message(f"   ‚è±Ô∏è Th·ªùi gian: {stats['total_duration']:.1f}s")
                
        messagebox.showinfo("Ho√†n th√†nh", "Batch processing ƒë√£ ho√†n th√†nh!")
        
    def export_report(self):
        """Xu·∫•t b√°o c√°o"""
        if not self.processor:
            messagebox.showwarning("C·∫£nh b√°o", "Ch∆∞a c√≥ d·ªØ li·ªáu ƒë·ªÉ xu·∫•t!")
            return
            
        filename = filedialog.asksaveasfilename(
            title="L∆∞u b√°o c√°o",
            defaultextension=".json",
            filetypes=[("JSON files", "*.json"), ("All files", "*.*")]
        )
        
        if filename:
            try:
                self.processor.export_report(filename)
                self.log_message(f"üìÑ ƒê√£ xu·∫•t b√°o c√°o: {filename}")
                messagebox.showinfo("Th√†nh c√¥ng", f"ƒê√£ xu·∫•t b√°o c√°o ra file:\\n{filename}")
            except Exception as e:
                messagebox.showerror("L·ªói", f"L·ªói xu·∫•t b√°o c√°o: {str(e)}")
                
    def log_message(self, message):
        """Th√™m message v√†o log"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        self.log_text.insert(tk.END, f"[{timestamp}] {message}\\n")
        self.log_text.see(tk.END)
        self.window.update_idletasks()

def show_batch_processing_dialog(parent):
    """Hi·ªÉn th·ªã dialog batch processing"""
    BatchProcessingGUI(parent)
