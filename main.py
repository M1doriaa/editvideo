#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
·ª®ng d·ª•ng Ch·ªânh s·ª≠a Video T·ª± ƒë·ªông v·ªõi Ph·ª• ƒë·ªÅ v√† T·ªâ l·ªá 9:16
T√°c gi·∫£: Video Editor Bot
M√¥ t·∫£: T·ª± ƒë·ªông t·∫°o ph·ª• ƒë·ªÅ, d·ªãch sang ti·∫øng Anh v√† chuy·ªÉn ƒë·ªïi video sang t·ªâ l·ªá 9:16
"""

import os
import sys
import tempfile
import subprocess
from pathlib import Path
import argparse
from video_processor import VideoProcessor
from subtitle_generator import SubtitleGenerator
from translator import Translator
from aspect_ratio_converter import AspectRatioConverter

class AutoVideoEditor:
    def __init__(self):
        self.video_processor = VideoProcessor()
        self.subtitle_generator = SubtitleGenerator()
        self.translator = Translator()
        self.aspect_converter = AspectRatioConverter()
        
    def process_video(self, input_video_path, output_video_path, source_language='vi', target_language='en', img_folder=None, overlay_times=None, video_overlay_settings=None, custom_timeline=False, words_per_line=7):
        """
        X·ª≠ l√Ω video ch√≠nh theo c√°c b∆∞·ªõc:
        1. Tr√≠ch xu·∫•t audio
        2. T·∫°o ph·ª• ƒë·ªÅ t·ª´ audio
        3. D·ªãch ph·ª• ƒë·ªÅ sang ti·∫øng Anh
        4. Gh√©p ph·ª• ƒë·ªÅ v√†o video
        5. Chuy·ªÉn ƒë·ªïi t·ªâ l·ªá khung h√¨nh th√†nh 9:16
        
        Args:
            custom_timeline (bool): S·ª≠ d·ª•ng timeline t√πy ch·ªânh cho 3 ·∫£nh (1.png, 2.png, 3.png)
        """
        print("üé¨ B·∫Øt ƒë·∫ßu x·ª≠ l√Ω video...")
        
        try:
            # T·∫°o th∆∞ m·ª•c t·∫°m
            temp_dir = tempfile.mkdtemp()
            print(f"üìÅ Th∆∞ m·ª•c t·∫°m: {temp_dir}")
            
            # B∆∞·ªõc 1: Tr√≠ch xu·∫•t audio t·ª´ video
            print("üéµ B∆∞·ªõc 1: Tr√≠ch xu·∫•t audio t·ª´ video...")
            audio_path = os.path.join(temp_dir, "extracted_audio.wav")
            self.video_processor.extract_audio(input_video_path, audio_path)
              # B∆∞·ªõc 2: T·∫°o ph·ª• ƒë·ªÅ t·ª´ audio
            print("üìù B∆∞·ªõc 2: T·∫°o ph·ª• ƒë·ªÅ t·ª´ audio...")
            original_subtitle_path = os.path.join(temp_dir, "original_subtitle.srt")
            self.subtitle_generator.generate_subtitle(
                audio_path, 
                original_subtitle_path, 
                language=source_language,
                words_per_line=words_per_line
            )
              # B∆∞·ªõc 3: D·ªãch ph·ª• ƒë·ªÅ sang ng√¥n ng·ªØ ƒë√≠ch
            print(f"üåê B∆∞·ªõc 3: D·ªãch ph·ª• ƒë·ªÅ t·ª´ {source_language} sang {target_language}...")
            translated_subtitle_path = os.path.join(temp_dir, f"{target_language}_subtitle.srt")
            self.translator.translate_subtitle(
                original_subtitle_path,
                translated_subtitle_path,
                source_lang=source_language,
                target_lang=target_language
            )            # B∆∞·ªõc 4: Gh√©p ph·ª• ƒë·ªÅ v√† overlay v√†o video
            print("üéûÔ∏è B∆∞·ªõc 4: Gh√©p ph·ª• ƒë·ªÅ v√† overlay v√†o video...")
            video_with_subtitle_path = os.path.join(temp_dir, "video_with_subtitle.mp4")
              # X·ª≠ l√Ω video overlay n·∫øu c√≥
            if video_overlay_settings and video_overlay_settings.get('enabled', False):
                print("üé¨ ƒêang x·ª≠ l√Ω video overlay v·ªõi chroma key...")
                try:
                    temp_video_overlay_path = os.path.join(temp_dir, "temp_with_video_overlay.mp4")
                    
                    # Ki·ªÉm tra n·∫øu c√≥ multiple overlays
                    if 'multiple_overlays' in video_overlay_settings:
                        # X·ª≠ l√Ω multiple overlays
                        overlays = video_overlay_settings['multiple_overlays']
                        print(f"üé¨ X·ª≠ l√Ω {len(overlays)} video overlay...")
                        self._process_multiple_video_overlays(
                            input_video_path, 
                            temp_video_overlay_path, 
                            overlays, 
                            temp_dir
                        )
                    else:
                        # X·ª≠ l√Ω single overlay (c≈©)
                        from video_overlay import add_video_overlay_with_chroma
                        settings = video_overlay_settings
                        add_video_overlay_with_chroma(
                            main_video_path=input_video_path,
                            overlay_video_path=settings['video_path'],
                            output_path=temp_video_overlay_path,
                            start_time=settings.get('start_time', 0),
                            duration=settings.get('duration'),
                            position=settings.get('position', 'top-right'),
                            size_percent=settings.get('size_percent', 25),
                            chroma_key=settings.get('chroma_key', True),
                            chroma_color=self._get_chroma_color(settings.get('chroma_color', 'green')),
                            chroma_similarity=self._get_chroma_sensitivity(settings.get('chroma_sensitivity', 'very_strict'))[0],
                            chroma_blend=self._get_chroma_sensitivity(settings.get('chroma_sensitivity', 'very_strict'))[1]
                        )
                    
                    # Sau ƒë√≥ th√™m ph·ª• ƒë·ªÅ v√† image overlay l√™n video ƒë√£ c√≥ video overlay
                    if img_folder and overlay_times and os.path.exists(img_folder):
                        self.video_processor.add_subtitle_to_video(
                            temp_video_overlay_path,
                            translated_subtitle_path,
                            video_with_subtitle_path,
                            img_folder,
                            overlay_times
                        )
                    else:
                        # Ch·ªâ th√™m ph·ª• ƒë·ªÅ
                        self.video_processor.add_subtitle_to_video(
                            temp_video_overlay_path,
                            translated_subtitle_path,
                            video_with_subtitle_path
                        )
                    
                except Exception as e:
                    print(f"‚ö†Ô∏è L·ªói video overlay: {e}, s·ª≠ d·ª•ng ph∆∞∆°ng ph√°p c≈©...")
                    # Fallback v·ªÅ ph∆∞∆°ng ph√°p c≈©
                    if img_folder and overlay_times and os.path.exists(img_folder):
                        self.video_processor.add_subtitle_to_video(
                            input_video_path,
                            translated_subtitle_path,
                            video_with_subtitle_path,
                            img_folder,
                            overlay_times
                        )
                    else:
                        self.video_processor.add_subtitle_to_video(
                            input_video_path,
                            translated_subtitle_path,
                            video_with_subtitle_path
                        )
              # X·ª≠ l√Ω image overlay v√† ph·ª• ƒë·ªÅ (n·∫øu kh√¥ng c√≥ video overlay)
            elif img_folder and os.path.exists(img_folder):
                # Ki·ªÉm tra n·∫øu s·ª≠ d·ª•ng custom timeline
                if custom_timeline:
                    print("üéØ S·ª≠ d·ª•ng custom timeline cho 3 ·∫£nh...")
                    try:
                        from video_overlay import add_images_with_custom_timeline
                        success = add_images_with_custom_timeline(
                            input_video_path,
                            translated_subtitle_path,
                            video_with_subtitle_path,
                            img_folder
                        )
                        if not success:
                            print("‚ö†Ô∏è Custom timeline th·∫•t b·∫°i, s·ª≠ d·ª•ng ph∆∞∆°ng ph√°p c≈©...")
                            self.video_processor.add_subtitle_to_video(
                                input_video_path,
                                translated_subtitle_path,
                                video_with_subtitle_path
                            )
                    except ImportError:
                        print("‚ö†Ô∏è Module video_overlay kh√¥ng c√≥, s·ª≠ d·ª•ng ph∆∞∆°ng ph√°p c≈©...")
                        self.video_processor.add_subtitle_to_video(
                            input_video_path,
                            translated_subtitle_path,
                            video_with_subtitle_path
                        )
                elif overlay_times:
                    # S·ª≠ d·ª•ng video overlay module v·ªõi multiple overlays
                    try:
                        from video_overlay import add_multiple_overlays
                        success = add_multiple_overlays(
                            input_video_path,
                            translated_subtitle_path,
                            video_with_subtitle_path,
                            img_folder,
                            overlay_times
                        )
                        if not success:
                            print("‚ö†Ô∏è Overlay th·∫•t b·∫°i, s·ª≠ d·ª•ng ph∆∞∆°ng ph√°p c≈©...")
                            self.video_processor.add_subtitle_to_video(
                                input_video_path,
                                translated_subtitle_path,
                                video_with_subtitle_path,
                                img_folder,
                                overlay_times
                            )
                    except ImportError:
                        print("‚ö†Ô∏è Module video_overlay kh√¥ng c√≥, s·ª≠ d·ª•ng ph∆∞∆°ng ph√°p c≈©...")
                        self.video_processor.add_subtitle_to_video(
                            input_video_path,
                            translated_subtitle_path,
                            video_with_subtitle_path,
                            img_folder,
                            overlay_times
                        )
                else:
                    # Ch·ªâ gh√©p ph·ª• ƒë·ªÅ v·ªõi th∆∞ m·ª•c ·∫£nh (kh√¥ng c√≥ overlay times)
                    self.video_processor.add_subtitle_to_video(
                        input_video_path,
                        translated_subtitle_path,
                        video_with_subtitle_path
                    )
            else:
                # Ch·ªâ gh√©p ph·ª• ƒë·ªÅ
                self.video_processor.add_subtitle_to_video(
                    input_video_path,
                    translated_subtitle_path,
                    video_with_subtitle_path
                )
            
            # B∆∞·ªõc 5: Chuy·ªÉn ƒë·ªïi t·ªâ l·ªá khung h√¨nh th√†nh 9:16
            print("üì± B∆∞·ªõc 5: Chuy·ªÉn ƒë·ªïi t·ªâ l·ªá khung h√¨nh th√†nh 9:16...")
            self.aspect_converter.convert_to_9_16(
                video_with_subtitle_path,
                output_video_path
            )
            
            print(f"‚úÖ Ho√†n th√†nh! Video ƒë√£ ƒë∆∞·ª£c l∆∞u t·∫°i: {output_video_path}")
              # D·ªçn d·∫πp th∆∞ m·ª•c t·∫°m
            import shutil
            shutil.rmtree(temp_dir)
            print("üßπ ƒê√£ d·ªçn d·∫πp th∆∞ m·ª•c t·∫°m")
            
        except Exception as e:
            print(f"‚ùå L·ªói trong qu√° tr√¨nh x·ª≠ l√Ω: {str(e)}")
            raise

    def _process_multiple_video_overlays(self, input_video_path, output_path, settings_list, temp_dir):
        """X·ª≠ l√Ω nhi·ªÅu video overlay"""
        current_video = input_video_path
        
        for i, settings in enumerate(settings_list):
            temp_output = os.path.join(temp_dir, f"temp_overlay_{i}.mp4")
            
            print(f"üé¨ √Åp d·ª•ng video overlay {i+1}/{len(settings_list)}...")
            
            from video_overlay import add_video_overlay_with_chroma
            
            # X·ª≠ l√Ω chroma color v√† similarity
            chroma_color = settings.get('chroma_color', 'green')
            chroma_similarity = settings.get('chroma_similarity', 0.25)
            
            # N·∫øu chroma_color l√† string preset, chuy·ªÉn ƒë·ªïi
            if not chroma_color.startswith('0x'):
                chroma_color = self._get_chroma_color(chroma_color)
            
            # N·∫øu chroma_similarity l√† string preset, chuy·ªÉn ƒë·ªïi  
            if isinstance(chroma_similarity, str):
                chroma_similarity = self._get_chroma_sensitivity(chroma_similarity)[0]
            
            add_video_overlay_with_chroma(
                main_video_path=current_video,
                overlay_video_path=settings['video_path'],
                output_path=temp_output,
                start_time=settings.get('start_time', 0),
                duration=settings.get('duration'),
                position=settings.get('position', 'top-right'),
                size_percent=settings.get('size_percent', 25),
                chroma_key=settings.get('chroma_key', True),
                color=chroma_color,  # S·ª≠ d·ª•ng alias t·ª´ test_chroma_key.py
                similarity=chroma_similarity  # S·ª≠ d·ª•ng alias t·ª´ test_chroma_key.py
            )
            
            current_video = temp_output
        
        # Copy k·∫øt qu·∫£ cu·ªëi c√πng
        import shutil
        shutil.copy2(current_video, output_path)
        return True

    def _get_chroma_color(self, color_name):
        """Chuy·ªÉn ƒë·ªïi t√™n m√†u th√†nh m√£ hex"""
        colors = {
            "green": "0x00ff00",
            "blue": "0x0000ff", 
            "cyan": "0x00ffff",
            "red": "0xff0000",
            "magenta": "0xff00ff",
            "yellow": "0xffff00"
        }
        return colors.get(color_name.lower(), "0x00ff00")
    
    def _get_chroma_sensitivity(self, preset_name):
        """Chuy·ªÉn ƒë·ªïi preset ƒë·ªô nh·∫°y th√†nh gi√° tr·ªã"""
        presets = {
            "loose": (0.3, 0.3),
            "normal": (0.1, 0.1),
            "strict": (0.05, 0.05),
            "very_strict": (0.01, 0.01),
            "ultra_strict": (0.005, 0.005)
        }
        return presets.get(preset_name.lower(), (0.01, 0.01))

def main():
    parser = argparse.ArgumentParser(
        description="·ª®ng d·ª•ng Ch·ªânh s·ª≠a Video T·ª± ƒë·ªông v·ªõi Ph·ª• ƒë·ªÅ v√† T·ªâ l·ªá 9:16"
    )
    parser.add_argument(
        "input_video_path", 
        help="ƒê∆∞·ªùng d·∫´n ƒë·∫øn file video ƒë·∫ßu v√†o"
    )
    parser.add_argument(
        "output_video_path", 
        help="ƒê∆∞·ªùng d·∫´n ƒë·ªÉ l∆∞u file video ƒë·∫ßu ra"
    )
    parser.add_argument(
        "--source-lang", 
        default="vi", 
        help="Ng√¥n ng·ªØ g·ªëc c·ªßa video (m·∫∑c ƒë·ªãnh: vi - ti·∫øng Vi·ªát)"
    )
    parser.add_argument(
        "--target-lang", 
        default="en", 
        help="Ng√¥n ng·ªØ ƒë√≠ch cho ph·ª• ƒë·ªÅ (m·∫∑c ƒë·ªãnh: en - English)"
    )
    
    args = parser.parse_args()
    
    # Ki·ªÉm tra file ƒë·∫ßu v√†o c√≥ t·ªìn t·∫°i
    if not os.path.exists(args.input_video_path):
        print(f"‚ùå File video ƒë·∫ßu v√†o kh√¥ng t·ªìn t·∫°i: {args.input_video_path}")
        sys.exit(1)
    
    # T·∫°o th∆∞ m·ª•c ƒë·∫ßu ra n·∫øu ch∆∞a t·ªìn t·∫°i
    output_dir = os.path.dirname(args.output_video_path)
    if output_dir and not os.path.exists(output_dir):
        os.makedirs(output_dir)
    
    # Kh·ªüi t·∫°o v√† ch·∫°y ·ª©ng d·ª•ng
    editor = AutoVideoEditor()
    editor.process_video(
        input_video_path=args.input_video_path, 
        output_video_path=args.output_video_path, 
        source_language=args.source_lang,
        target_language=args.target_lang
    )

if __name__ == "__main__":
    main()
